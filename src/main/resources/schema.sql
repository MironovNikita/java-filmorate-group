CREATE TABLE IF NOT EXISTS FILMS (
    FILM_ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    FILM_NAME VARCHAR(40)   NOT NULL,
    DESCRIPTION VARCHAR(200),
    RELEASE_DATE DATE   NOT NULL,
    DURATION INT   NULL,
    RATE INT NULL,
    MPA_ID INT   NULL,
    CONSTRAINT PK_FILMS PRIMARY KEY (
        FILM_ID
     )
);

CREATE TABLE IF NOT EXISTS USERS (
    USER_ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    EMAIL VARCHAR(40) NOT NULL,
    LOGIN VARCHAR(40) NOT NULL,
    USER_NAME VARCHAR(40) NULL,
    BIRTHDAY DATE NULL,
    CONSTRAINT PK_USERS PRIMARY KEY (
        USER_ID
    ),
    CONSTRAINT UC_USERS_EMAIL UNIQUE (
        EMAIL
    ),
    CONSTRAINT UC_USERS_LOGIN UNIQUE (
        LOGIN
    )
);

CREATE TABLE IF NOT EXISTS GENRES (
    GENRE_ID INT,
    GENRE_NAME VARCHAR(40),
    CONSTRAINT PK_GENRES PRIMARY KEY (
        GENRE_ID
     ),
    CONSTRAINT UC_GENRES_NAME_ID UNIQUE (
        GENRE_NAME
    )
);

CREATE TABLE IF NOT EXISTS FILM_GENRES (
    FILM_ID INT,
    GENRE_ID INT,
    CONSTRAINT UNIQUE_PAIR UNIQUE (
    FILM_ID, GENRE_ID
    )
);

CREATE TABLE IF NOT EXISTS MPA (
    MPA_ID INT NOT NULL,
    MPA_NAME VARCHAR(10)   NOT NULL,
    CONSTRAINT PK_MPA PRIMARY KEY (
        MPA_ID
     ),
    CONSTRAINT UC_MPA_RATING UNIQUE (
        MPA_NAME
    )
);

CREATE TABLE IF NOT EXISTS FRIENDS (
    USER_ID INT,
    FRIEND_ID INT
);

CREATE TABLE IF NOT EXISTS LIKES (
    FILM_ID INT,
    USER_ID INT
);

CREATE TABLE IF NOT EXISTS REVIEWS (
    REVIEW_ID INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    CONTENT VARCHAR NOT NULL,
    IS_POSITIVE BOOLEAN NOT NULL,
    USER_ID INT NOT NULL,
    FILM_ID INT NOT NULL,
    USEFUL INT,
    CONSTRAINT PK_REVIEWS PRIMARY KEY (REVIEW_ID)
);

CREATE TABLE IF NOT EXIST REVIEWS_LIKES (
    REVIEW_ID INT,
    USER_ID INT,
    IS_LIKE BOOLEAN NOT NULL,
    CONSTRAINT REVIEWS_LIKES_FK FOREIGN KEY (REVIEW_ID) REFERENCES REVIEWS(REVIEW_ID) ON DELETE RESTRICT ON UPDATE RESTRICT,
  	CONSTRAINT REVIEWS_LIKES_FK_1 FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE RESTRICT ON UPDATE RESTRICT


)

ALTER TABLE REVIEWS ADD CONSTRAINT IF NOT EXISTS FK_REVIEWS_USER_ID FOREIGN KEY (USER_ID)
    REFERENCES USERS(USER_ID) ON DELETE CASCADE;
ALTER TABLE REVIEWS ADD CONSTRAINT IF NOT EXISTS FK_REVIEWS_FILM_ID FOREIGN KEY (FILM_ID)
    REFERENCES FILMS(FILM_ID) ON DELETE CASCADE;


ALTER TABLE FILMS ADD CONSTRAINT IF NOT EXISTS FK_FILMS_MPA_ID FOREIGN KEY(MPA_ID)
REFERENCES MPA (MPA_ID);


ALTER TABLE FILMGENRES ADD CONSTRAINT IF NOT EXISTS FK_FILMGENRES_FILM_ID FOREIGN KEY(FILM_ID)
REFERENCES FILMS (FILM_ID);


ALTER TABLE FILMGENRES ADD CONSTRAINT IF NOT EXISTS FK_FILMGENRES_GENRE_ID FOREIGN KEY(GENRE_ID)
REFERENCES GENRES (GENRE_ID);


ALTER TABLE FRIENDS ADD CONSTRAINT IF NOT EXISTS FK_FRIENDS_USER_ID FOREIGN KEY(USER_ID)
REFERENCES USERS (USER_ID);


ALTER TABLE FRIENDS ADD CONSTRAINT IF NOT EXISTS FK_FRIENDS_FRIENDS_ID FOREIGN KEY(FRIEND_ID)
REFERENCES USERS (USER_ID);


ALTER TABLE LIKES ADD CONSTRAINT IF NOT EXISTS FK_LIKES_FILM_ID FOREIGN KEY(FILM_ID)
REFERENCES FILMS (FILM_ID);


ALTER TABLE LIKES ADD CONSTRAINT IF NOT EXISTS FK_LIKES_USER_ID FOREIGN KEY(USER_ID)
REFERENCES USERS (USER_ID);

ALTER TABLE FILMS ALTER COLUMN FILM_ID RESTART WITH 1;
ALTER TABLE USERS ALTER COLUMN USER_ID RESTART WITH 1;